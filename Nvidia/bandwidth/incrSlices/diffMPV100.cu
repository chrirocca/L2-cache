#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <math.h>
#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <vector>
#include <ctime>
#include <sys/time.h>

#define BLOCK_SIZE 32 // related with tid*NÂ°
#define ADDRESS_BLOCK 256
#define S_SIZE ((6*1024)*1024)/4 // must be smaller than L2 cache size
#define ITERATION 10000
#define MULTIPLIER 1

typedef unsigned int uint;

#define USECPSEC 1000000ULL

#define DIV_ROUND_CLOSEST(n, d) ((((n) < 0) == ((d) < 0)) ? (((n) + (d)/2)/(d)) : (((n) - (d)/2)/(d)))

#define cudaCheckError() {                                          \
    cudaError_t e=cudaGetLastError();                                 \
    if(e!=cudaSuccess) {                                              \
        printf("Cuda failure %s:%d: '%s'\n",__FILE__,__LINE__,cudaGetErrorString(e));           \
        exit(0); \
    }                                                                 \
}

__device__ unsigned int get_smid(void) {
    unsigned int ret;
    asm("mov.u32 %0, %smid;" : "=r"(ret) );
    return ret;
}

double dtime_usec(unsigned long long start=0){
    timeval tv;
    gettimeofday(&tv, 0);
    return ((tv.tv_sec*USECPSEC)+tv.tv_usec)-start;
}


__global__ void kernel(unsigned int *a0, unsigned int *value, unsigned int tx_max, unsigned max_slice){
    volatile __shared__ unsigned int k[BLOCK_SIZE*BLOCK_SIZE];
    __shared__ unsigned int idx[BLOCK_SIZE*BLOCK_SIZE];
    unsigned int tid = threadIdx.x;
    unsigned int warp = tid/32;
    unsigned int tx = tid%32;
    unsigned int sm_id = get_smid();
    unsigned int bid = blockIdx.y%1;
    __shared__ int temp[BLOCK_SIZE*32*MULTIPLIER];

for (int h=0;h<32;h++){
    for (int i=0;i<BLOCK_SIZE*MULTIPLIER;i++){
        temp[i+h*BLOCK_SIZE*MULTIPLIER] = value[i+h*BLOCK_SIZE*MULTIPLIER];
    }
}
    __syncthreads();

if (sm_id == 0||sm_id==1||sm_id==12||sm_id==13||sm_id==24||sm_id==25||sm_id==36||sm_id==37||sm_id==48||sm_id==49||sm_id==60||sm_id==61||sm_id==70||sm_id==71){
        for (int i = 0; i < ITERATION; i ++){
            if (tx<=tx_max) {
            for (int n=0;n<max_slice;n++){
            idx[tid] = warp*8 + tx%8 + temp[tx+n*BLOCK_SIZE*MULTIPLIER + bid*BLOCK_SIZE]*ADDRESS_BLOCK;
            for (int j=0;j<2;j++) k[tid] += a0[idx[tid]];
            
            }
            }
        }
    a0[0] = k[0];
    }
}
    
    
int main(int argc, char * argv[]) {
    unsigned int * h_arr;
    unsigned int * d_a0;

    unsigned int * d_sel;

    int tx_max;
    int percentage;

/*     initMeasureMetric(); */

    cudaDeviceProp device_prop;
    cudaGetDeviceProperties(&device_prop, 0);

    const int NUM_SM = device_prop.multiProcessorCount; // number of SMs

    cudaSetDevice(0);

/*     MeasurementSeries L2_read;
    MeasurementSeries L2_write;
    MeasurementSeries time; */

    percentage = 100;
    tx_max = 32;
    unsigned int max_slice = atoi(argv[1]);

    unsigned int *hrow_idx0, *hrow_idx1, *hrow_idx2, *hrow_idx3, *hrow_idx;
    hrow_idx0 = (unsigned int *)malloc(sizeof(unsigned int) * 8);
    hrow_idx1 = (unsigned int *)malloc(sizeof(unsigned int) * 8);
    hrow_idx2 = (unsigned int *)malloc(sizeof(unsigned int) * 8);
    hrow_idx3 = (unsigned int *)malloc(sizeof(unsigned int) * 8);
    hrow_idx = (unsigned int *)malloc(sizeof(unsigned int) * 32);


        hrow_idx0[0] = 7; hrow_idx0[1]=3; hrow_idx0[2]=31; hrow_idx0[3]=27; hrow_idx0[4]=5; hrow_idx0[5]=1; hrow_idx0[6]=29; hrow_idx0[7]=25;
        hrow_idx1[0] = 8; hrow_idx1[1]=12; hrow_idx1[2]=16; hrow_idx1[3]=20; hrow_idx1[4]=10; hrow_idx1[5]=14; hrow_idx1[6]=18; hrow_idx1[7]=22;
        hrow_idx2[0] = 0; hrow_idx2[1]=4; hrow_idx2[2]=24; hrow_idx2[3]=28; hrow_idx2[4]=2; hrow_idx2[5]=6; hrow_idx2[6]=26; hrow_idx2[7]=30;
        hrow_idx3[0] = 17; hrow_idx3[1]=21; hrow_idx3[2]=9; hrow_idx3[3]=13; hrow_idx3[4]=19; hrow_idx3[5]=23; hrow_idx3[6]=11; hrow_idx3[7]=15;

/*     int pattern_values[] = {22, 23, 20, 21, 18, 19, 16, 17, 30, 31, 28, 29, 26, 27, 24, 25, 6, 7, 4, 5, 2, 3, 0, 1, 14, 15, 12, 13, 10, 11, 8, 9};

for (int i=0;i<8;i++){
    hrow_idx0[i] = pattern_values[hrow_idx0[i]];
    hrow_idx1[i] = pattern_values[hrow_idx1[i]];
    hrow_idx2[i] = pattern_values[hrow_idx2[i]];
    hrow_idx3[i] = pattern_values[hrow_idx3[i]];
} */

    hrow_idx[0]=hrow_idx0[0]; hrow_idx[1]=hrow_idx1[0]; hrow_idx[2]=hrow_idx2[0]; hrow_idx[3]=hrow_idx3[0]; hrow_idx[4]=hrow_idx0[7]; hrow_idx[5]=hrow_idx1[7]; hrow_idx[6]=hrow_idx2[7]; hrow_idx[7]=hrow_idx3[7];
    hrow_idx[8]=hrow_idx0[1]; hrow_idx[9]=hrow_idx1[1]; hrow_idx[10]=hrow_idx2[1]; hrow_idx[11]=hrow_idx3[1]; hrow_idx[12]=hrow_idx0[6]; hrow_idx[13]=hrow_idx1[6]; hrow_idx[14]=hrow_idx2[6]; hrow_idx[15]=hrow_idx3[6];
    hrow_idx[16]=hrow_idx0[2]; hrow_idx[17]=hrow_idx1[2]; hrow_idx[18]=hrow_idx2[2]; hrow_idx[19]=hrow_idx3[2]; hrow_idx[20]=hrow_idx0[5]; hrow_idx[21]=hrow_idx1[5]; hrow_idx[22]=hrow_idx2[5]; hrow_idx[23]=hrow_idx3[5];
    hrow_idx[24]=hrow_idx0[3]; hrow_idx[25]=hrow_idx1[3]; hrow_idx[26]=hrow_idx2[3]; hrow_idx[27]=hrow_idx3[3]; hrow_idx[28]=hrow_idx0[4]; hrow_idx[29]=hrow_idx1[4]; hrow_idx[30]=hrow_idx2[4]; hrow_idx[31]=hrow_idx3[4];

/*  for (int i=0;i<80;i++){   
    hrow_idx[i] = i;
} */

    h_arr = (unsigned int *)malloc(sizeof(unsigned int) * S_SIZE);

    unsigned int h_matrix[BLOCK_SIZE*32] = {
42, 58, 110, 126, 171, 187, 239, 255, 264, 280, 332, 348, 393, 409, 461, 477, 544, 560, 612, 628, 673, 689, 741, 757, 770, 786, 838, 854, 899, 915, 967, 983,
8, 24, 76, 92, 137, 153, 205, 221, 298, 314, 366, 382, 427, 443, 495, 511, 514, 530, 582, 598, 643, 659, 711, 727, 800, 816, 868, 884, 929, 945, 997, 1013,
0, 16, 68, 84, 129, 145, 197, 213, 290, 306, 358, 374, 419, 435, 487, 503, 522, 538, 590, 606, 651, 667, 719, 735, 808, 824, 876, 892, 937, 953, 1005, 1021,
34, 50, 102, 118, 163, 179, 231, 247, 256, 272, 324, 340, 385, 401, 453, 469, 552, 568, 620, 636, 681, 697, 749, 765, 778, 794, 846, 862, 907, 923, 975, 991,
46, 62, 106, 122, 175, 191, 235, 251, 268, 284, 328, 344, 397, 413, 457, 473, 548, 564, 608, 624, 677, 693, 737, 753, 774, 790, 834, 850, 903, 919, 963, 979,
12, 28, 72, 88, 141, 157, 201, 217, 302, 318, 362, 378, 431, 447, 491, 507, 518, 534, 578, 594, 647, 663, 707, 723, 804, 820, 864, 880, 933, 949, 993, 1009,
4, 20, 64, 80, 133, 149, 193, 209, 294, 310, 354, 370, 423, 439, 483, 499, 526, 542, 586, 602, 655, 671, 715, 731, 812, 828, 872, 888, 941, 957, 1001, 1017,
38, 54, 98, 114, 167, 183, 227, 243, 260, 276, 320, 336, 389, 405, 449, 465, 556, 572, 616, 632, 685, 701, 745, 761, 782, 798, 842, 858, 911, 927, 971, 987,
43, 59, 111, 127, 170, 186, 238, 254, 265, 281, 333, 349, 392, 408, 460, 476, 545, 561, 613, 629, 672, 688, 740, 756, 771, 787, 839, 855, 898, 914, 966, 982,
9, 25, 77, 93, 136, 152, 204, 220, 299, 315, 367, 383, 426, 442, 494, 510, 515, 531, 583, 599, 642, 658, 710, 726, 801, 817, 869, 885, 928, 944, 996, 1012,
1, 17, 69, 85, 128, 144, 196, 212, 291, 307, 359, 375, 418, 434, 486, 502, 523, 539, 591, 607, 650, 666, 718, 734, 809, 825, 877, 893, 936, 952, 1004, 1020,
35, 51, 103, 119, 162, 178, 230, 246, 257, 273, 325, 341, 384, 400, 452, 468, 553, 569, 621, 637, 680, 696, 748, 764, 779, 795, 847, 863, 906, 922, 974, 990,
47, 63, 107, 123, 174, 190, 234, 250, 269, 285, 329, 345, 396, 412, 456, 472, 549, 565, 609, 625, 676, 692, 736, 752, 775, 791, 835, 851, 902, 918, 962, 978,
13, 29, 73, 89, 140, 156, 200, 216, 303, 319, 363, 379, 430, 446, 490, 506, 519, 535, 579, 595, 646, 662, 706, 722, 805, 821, 865, 881, 932, 948, 992, 1008,
5, 21, 65, 81, 132, 148, 192, 208, 295, 311, 355, 371, 422, 438, 482, 498, 527, 543, 587, 603, 654, 670, 714, 730, 813, 829, 873, 889, 940, 956, 1000, 1016,
39, 55, 99, 115, 166, 182, 226, 242, 261, 277, 321, 337, 388, 404, 448, 464, 557, 573, 617, 633, 684, 700, 744, 760, 783, 799, 843, 859, 910, 926, 970, 986,
10, 26, 78, 94, 139, 155, 207, 223, 296, 312, 364, 380, 425, 441, 493, 509, 512, 528, 580, 596, 641, 657, 709, 725, 802, 818, 870, 886, 931, 947, 999, 1015,
40, 56, 108, 124, 169, 185, 237, 253, 266, 282, 334, 350, 395, 411, 463, 479, 546, 562, 614, 630, 675, 691, 743, 759, 768, 784, 836, 852, 897, 913, 965, 981,
32, 48, 100, 116, 161, 177, 229, 245, 258, 274, 326, 342, 387, 403, 455, 471, 554, 570, 622, 638, 683, 699, 751, 767, 776, 792, 844, 860, 905, 921, 973, 989,
2, 18, 70, 86, 131, 147, 199, 215, 288, 304, 356, 372, 417, 433, 485, 501, 520, 536, 588, 604, 649, 665, 717, 733, 810, 826, 878, 894, 939, 955, 1007, 1023,
14, 30, 74, 90, 143, 159, 203, 219, 300, 316, 360, 376, 429, 445, 489, 505, 516, 532, 576, 592, 645, 661, 705, 721, 806, 822, 866, 882, 935, 951, 995, 1011,
44, 60, 104, 120, 173, 189, 233, 249, 270, 286, 330, 346, 399, 415, 459, 475, 550, 566, 610, 626, 679, 695, 739, 755, 772, 788, 832, 848, 901, 917, 961, 977,
36, 52, 96, 112, 165, 181, 225, 241, 262, 278, 322, 338, 391, 407, 451, 467, 558, 574, 618, 634, 687, 703, 747, 763, 780, 796, 840, 856, 909, 925, 969, 985,
6, 22, 66, 82, 135, 151, 195, 211, 292, 308, 352, 368, 421, 437, 481, 497, 524, 540, 584, 600, 653, 669, 713, 729, 814, 830, 874, 890, 943, 959, 1003, 1019,
11, 27, 79, 95, 138, 154, 206, 222, 297, 313, 365, 381, 424, 440, 492, 508, 513, 529, 581, 597, 640, 656, 708, 724, 803, 819, 871, 887, 930, 946, 998, 1014,
41, 57, 109, 125, 168, 184, 236, 252, 267, 283, 335, 351, 394, 410, 462, 478, 547, 563, 615, 631, 674, 690, 742, 758, 769, 785, 837, 853, 896, 912, 964, 980,
33, 49, 101, 117, 160, 176, 228, 244, 259, 275, 327, 343, 386, 402, 454, 470, 555, 571, 623, 639, 682, 698, 750, 766, 777, 793, 845, 861, 904, 920, 972, 988,
3, 19, 71, 87, 130, 146, 198, 214, 289, 305, 357, 373, 416, 432, 484, 500, 521, 537, 589, 605, 648, 664, 716, 732, 811, 827, 879, 895, 938, 954, 1006, 1022,
15, 31, 75, 91, 142, 158, 202, 218, 301, 317, 361, 377, 428, 444, 488, 504, 517, 533, 577, 593, 644, 660, 704, 720, 807, 823, 867, 883, 934, 950, 994, 1010,
45, 61, 105, 121, 172, 188, 232, 248, 271, 287, 331, 347, 398, 414, 458, 474, 551, 567, 611, 627, 678, 694, 738, 754, 773, 789, 833, 849, 900, 916, 960, 976,
37, 53, 97, 113, 164, 180, 224, 240, 263, 279, 323, 339, 390, 406, 450, 466, 559, 575, 619, 635, 686, 702, 746, 762, 781, 797, 841, 857, 908, 924, 968, 984,
7, 23, 67, 83, 134, 150, 194, 210, 293, 309, 353, 369, 420, 436, 480, 496, 525, 541, 585, 601, 652, 668, 712, 728, 815, 831, 875, 891, 942, 958, 1002, 1018
};

 /*    unsigned int h_matrix[80*BLOCK_SIZE] = {
    
    99,118,140,153,320,429,442,598,685,696,864,885,910,1065,1086,1290,1311,1509,1520,1546,1767,1776,1834,1988,2001,2114,2135,2220,2401,2422,2444,2659,
119,141,343,428,441,578,599,697,867,884,921,1064,1085,1223,1234,1291,1510,1521,1565,1766,1779,1835,1854,1989,2134,2402,2423,2456,2658,2703,2712,2882,
97,116,143,322,341,431,576,597,687,698,886,908,923,1067,1221,1288,1309,1523,1544,1567,1765,1833,1852,1990,2003,2132,2222,2233,2420,2447,2458,2657,
98,117,152,321,340,443,577,684,699,865,911,922,1066,1087,1220,1289,1310,1508,1547,1566,1764,1777,1853,1991,2000,2115,2221,2232,2400,2421,2459,2656,
101,136,324,337,427,446,683,700,881,906,927,1071,1082,1236,1294,1305,1524,1550,1563,1761,1780,1837,1984,2007,2131,2216,2405,2416,2443,2663,2672,2717,
102,115,137,156,336,426,445,582,680,701,869,880,926,1070,1081,1219,1295,1306,1504,1525,1562,1760,1783,1850,1985,2004,2119,2130,2236,2406,2417,2460,
112,139,158,326,339,424,595,702,871,882,904,925,1068,1217,1238,1506,1527,1548,1561,1762,1839,1848,1986,2117,2128,2218,2239,2419,2441,2462,2661,2699,
100,113,159,325,338,447,581,592,682,703,870,907,924,1083,1216,1237,1293,1304,1507,1551,1560,1781,1836,1849,1987,2006,2116,2217,2238,2442,2463,2660,
103,138,157,327,425,444,594,681,868,883,905,1069,1080,1218,1239,1307,1505,1526,1549,1763,1782,1838,2005,2118,2129,2219,2407,2418,2440,2461,2674,2696,
86,172,187,374,397,408,611,630,664,834,853,952,1033,1052,1254,1267,1322,1479,1488,1596,1735,1746,1802,1823,2020,2144,2167,2202,2371,2390,2476,2489,
66,87,173,184,353,396,411,631,652,665,833,852,943,1032,1055,1266,1323,1342,1476,1489,1579,1734,1745,1803,2021,2032,2147,2166,2189,2368,2391,2477,
67,84,185,352,373,399,410,608,653,666,832,942,955,1035,1054,1253,1320,1343,1477,1578,1599,1733,1744,1820,2022,2033,2146,2188,2201,2369,2388,2490,
64,85,174,355,372,398,609,628,654,667,855,941,954,1034,1252,1265,1321,1340,1490,1577,1598,1732,1800,1821,2023,2034,2165,2191,2200,2389,2478,2491,
71,82,168,189,369,395,412,615,649,668,836,849,959,1039,1048,1250,1326,1339,1473,1492,1595,1729,1750,1819,2016,2037,2150,2163,2205,2375,2384,2493,
68,83,169,357,368,394,415,624,650,669,848,939,958,1038,1051,1269,1327,1336,1493,1583,1594,1728,1749,1804,2017,2038,2162,2185,2204,2372,2385,2474,
69,80,190,356,371,414,612,625,651,670,839,938,957,1050,1249,1268,1324,1337,1474,1582,1593,1748,1805,1816,2018,2039,2149,2184,2207,2373,2475,2494,
81,170,191,359,370,393,613,626,671,838,851,937,956,1037,1248,1271,1325,1475,1494,1581,1592,1731,1806,1817,2019,2148,2161,2187,2206,2386,2472,2495,
70,171,188,358,392,413,614,627,648,837,850,936,1036,1049,1251,1270,1338,1472,1495,1580,1730,1751,1807,1818,2036,2151,2160,2186,2374,2387,2473,2492,
65,175,186,354,375,409,610,629,655,835,854,940,953,1053,1255,1264,1341,1478,1491,1576,1597,1747,1801,1822,2035,2145,2164,2190,2203,2370,2479,2488,
35,54,204,217,256,493,506,534,749,760,800,821,974,1129,1150,1171,1354,1375,1445,1456,1610,1703,1712,1898,1924,1937,2050,2071,2284,2337,2358,
55,205,218,279,492,505,514,535,761,803,820,985,1128,1149,1159,1170,1355,1446,1457,1629,1702,1715,1899,1918,1925,2049,2070,2299,2338,2359,
33,52,207,258,277,495,512,533,751,762,822,972,987,1131,1157,1168,1352,1373,1459,1608,1631,1701,1897,1916,1926,1939,2068,2286,2297,2356,
34,53,216,257,276,494,507,513,748,763,801,975,986,1130,1151,1156,1353,1374,1444,1611,1630,1700,1713,1917,1927,1936,2051,2285,2296,2336,2357,
37,50,200,260,273,491,510,529,747,764,817,970,991,1135,1146,1172,1358,1369,1460,1614,1627,1697,1716,1901,1920,1943,2067,2280,2301,2341,2352,
38,51,201,220,272,490,509,518,744,765,805,816,990,1134,1145,1155,1359,1370,1440,1461,1626,1696,1719,1914,1921,1940,2055,2066,2300,2342,2353,
48,203,222,262,275,488,516,531,766,807,818,968,989,1132,1153,1174,1356,1442,1463,1612,1625,1698,1903,1912,1922,2053,2064,2282,2303,2355,
36,49,223,261,274,511,517,528,746,767,806,971,988,1147,1152,1173,1357,1368,1443,1615,1624,1717,1900,1913,1923,1942,2052,2281,2302,2340,
39,202,221,263,489,508,519,530,745,804,819,969,1133,1144,1154,1175,1371,1441,1462,1613,1699,1718,1902,1915,1941,2054,2065,2283,2343,2354,
32,206,219,259,278,504,515,532,750,802,823,973,984,1148,1158,1169,1372,1447,1458,1609,1628,1714,1896,1919,1938,2048,2069,2287,2298,2339,
22,236,251,310,461,472,547,566,728,770,789,1016,1097,1116,1190,1203,1386,1415,1424,1660,1671,1682,1866,1887,1956,2080,2103,2266,2307,2326,
2,23,237,248,289,460,475,567,716,729,769,788,1007,1096,1119,1202,1387,1406,1412,1425,1643,1670,1681,1867,1957,1968,2083,2102,2253,2304,2327,
3,20,249,288,309,463,474,544,717,730,768,1006,1019,1099,1118,1189,1384,1407,1413,1642,1663,1669,1680,1884,1958,1969,2082,2252,2265,2305,2324,
0,21,238,291,308,462,545,564,718,731,791,1005,1018,1098,1188,1201,1385,1404,1426,1641,1662,1668,1864,1885,1959,1970,2101,2255,2264,2325,
7,18,232,253,305,459,476,551,713,732,772,785,1023,1103,1112,1186,1390,1403,1409,1428,1659,1665,1686,1883,1952,1973,2086,2099,2269,2311,2320,
4,19,233,293,304,458,479,560,714,733,784,1003,1022,1102,1115,1205,1391,1400,1429,1647,1658,1664,1685,1868,1953,1974,2098,2249,2268,2308,2321,
5,16,254,292,307,478,548,561,715,734,775,1002,1021,1114,1185,1204,1388,1401,1410,1646,1657,1684,1869,1880,1954,1975,2085,2248,2271,2309,
17,234,255,295,306,457,549,562,735,774,787,1001,1020,1101,1184,1207,1389,1411,1430,1645,1656,1667,1870,1881,1955,2084,2097,2251,2270,2322,
6,235,252,294,456,477,550,563,712,773,786,1000,1100,1113,1187,1206,1402,1408,1431,1644,1666,1687,1871,1882,1972,2087,2096,2250,2310,2323,
1,239,250,290,311,473,546,565,719,771,790,1004,1017,1117,1191,1200,1405,1414,1427,1640,1661,1683,1865,1886,1971,2081,2100,2254,2267,2306,
107,126,133,328,351,421,586,607,677,688,892,902,913,1057,1231,1242,1282,1303,1529,1538,1557,1775,1827,1846,1996,2009,2142,2212,2227,2430,2437,2448,
104,127,146,331,350,420,433,587,678,689,875,901,912,1056,1077,1230,1283,1300,1518,1537,1556,1774,1787,1847,1997,2010,2121,2215,2226,2410,2431,2449,
105,124,134,147,330,423,432,604,679,690,874,895,900,1059,1076,1241,1280,1301,1519,1530,1536,1773,1786,1824,1998,2011,2120,2141,2214,2411,2428,2438,
125,135,144,349,422,435,584,605,691,873,894,915,1058,1079,1229,1240,1281,1516,1531,1559,1772,1785,1825,1844,1999,2123,2140,2225,2408,2429,2439,2450,
122,129,148,332,345,418,590,601,692,877,888,898,919,1062,1227,1244,1286,1512,1533,1542,1555,1768,1829,1842,1992,2127,2138,2208,2229,2425,2435,2452,
110,123,149,335,344,437,591,602,672,693,876,897,918,1073,1226,1247,1287,1298,1513,1541,1554,1791,1830,1843,1993,2012,2126,2211,2228,2414,2432,2453,
111,120,130,334,347,417,436,603,673,694,891,896,917,1061,1072,1246,1284,1299,1534,1540,1553,1771,1790,1831,1994,2013,2137,2210,2231,2415,2426,2433,
108,121,131,150,346,416,439,588,674,695,879,890,916,1060,1075,1225,1285,1296,1514,1535,1552,1770,1789,1840,1995,2014,2125,2136,2230,2412,2427,2454,
109,128,151,333,419,438,589,600,675,878,889,899,1063,1074,1224,1245,1297,1515,1532,1543,1769,1788,1828,1841,2015,2124,2139,2209,2413,2424,2434,2455,
106,132,145,329,348,434,585,606,676,872,893,903,914,1078,1228,1243,1302,1517,1528,1539,1558,1784,1826,1845,2008,2122,2143,2213,2224,2409,2436,2451,
73,94,179,362,383,389,400,618,647,656,842,932,945,1025,1044,1263,1314,1333,1487,1568,1589,1743,1754,1814,2028,2043,2152,2182,2195,2379,2398,2480,
74,95,164,361,382,388,619,638,644,657,861,935,944,1024,1262,1275,1315,1334,1496,1571,1588,1742,1794,1815,2029,2040,2175,2181,2194,2399,2468,2481,
92,166,177,380,391,402,617,636,658,840,863,946,1027,1046,1260,1273,1312,1485,1498,1590,1741,1752,1792,1813,2030,2154,2173,2192,2377,2396,2470,2483,
72,93,167,178,363,390,401,637,646,659,843,862,933,1026,1045,1272,1313,1332,1486,1499,1569,1740,1755,1793,2031,2042,2153,2172,2183,2378,2397,2471,
79,90,180,366,377,404,622,635,641,660,845,928,951,1040,1259,1278,1318,1331,1480,1572,1587,1758,1799,1810,2024,2045,2159,2178,2197,2383,2465,2484,
91,160,181,365,376,387,623,632,661,844,857,931,950,1031,1258,1277,1319,1481,1500,1575,1586,1737,1796,1811,2025,2158,2171,2177,2196,2392,2466,2485,
77,88,162,183,379,385,406,621,643,662,846,859,949,1029,1042,1256,1316,1329,1483,1502,1585,1739,1756,1809,2026,2047,2156,2169,2199,2381,2394,2487,
78,89,163,367,378,384,405,634,640,663,858,929,948,1028,1041,1279,1317,1330,1503,1573,1584,1738,1759,1798,2027,2044,2168,2179,2198,2382,2395,2464,
76,161,182,364,386,407,620,633,642,847,856,930,1030,1043,1257,1276,1328,1482,1501,1574,1736,1757,1797,1808,2046,2157,2170,2176,2380,2393,2467,2486,
75,165,176,360,381,403,616,639,645,841,860,934,947,1047,1261,1274,1335,1484,1497,1570,1591,1753,1795,1812,2041,2155,2174,2180,2193,2376,2469,2482,
43,62,197,264,287,485,522,543,741,752,828,966,977,1121,1167,1178,1346,1367,1465,1602,1621,1711,1891,1910,1932,1945,2078,2276,2291,2366,
40,63,210,267,286,484,497,523,742,753,811,965,976,1120,1141,1166,1347,1364,1454,1601,1620,1710,1723,1911,1933,1946,2057,2279,2290,2346,2367,
41,60,198,211,266,487,496,540,743,754,810,831,964,1123,1140,1177,1344,1365,1455,1466,1600,1709,1722,1888,1934,1947,2056,2077,2278,2347,2364,
61,199,208,285,486,499,520,541,755,809,830,979,1122,1143,1165,1176,1345,1452,1467,1623,1708,1721,1889,1908,1935,2059,2076,2289,2344,2365,
58,193,212,268,281,482,526,537,756,813,824,962,983,1126,1163,1180,1350,1448,1469,1606,1619,1704,1893,1906,1928,2063,2074,2272,2293,2361,2499,
46,59,213,271,280,501,527,538,736,757,812,961,982,1137,1162,1183,1351,1362,1449,1605,1618,1727,1894,1907,1929,1948,2062,2275,2292,2350,2496,
47,56,194,270,283,481,500,539,737,758,827,960,981,1125,1136,1182,1348,1363,1470,1604,1617,1707,1726,1895,1930,1949,2073,2274,2295,2351,2362,2497,
44,57,195,214,282,480,503,524,738,759,815,826,980,1124,1139,1161,1349,1360,1450,1471,1616,1706,1725,1904,1931,1950,2061,2072,2294,2348,2363,
45,192,215,269,483,502,525,536,739,814,825,963,1127,1138,1160,1181,1361,1451,1468,1607,1705,1724,1892,1905,1951,2060,2075,2273,2349,2360,2498,
42,196,209,265,284,498,521,542,740,808,829,967,978,1142,1164,1179,1366,1453,1464,1603,1622,1720,1890,1909,1944,2058,2079,2277,2288,2345,
9,30,243,298,319,453,464,554,711,720,778,996,1009,1089,1108,1199,1378,1397,1423,1632,1653,1679,1690,1878,1964,1979,2088,2246,2259,2315,2334,2544,
10,31,228,297,318,452,555,574,708,721,797,999,1008,1088,1198,1211,1379,1398,1432,1635,1652,1678,1858,1879,1965,1976,2111,2245,2258,2335,2532,2545,
28,230,241,316,455,466,553,572,722,776,799,1010,1091,1110,1196,1209,1376,1421,1434,1654,1677,1688,1856,1877,1966,2090,2109,2256,2313,2332,2534,2547,
8,29,231,242,299,454,465,573,710,723,779,798,997,1090,1109,1208,1377,1396,1422,1435,1633,1676,1691,1857,1967,1978,2089,2108,2247,2314,2333,2535,
15,26,244,302,313,468,558,571,705,724,781,992,1015,1104,1195,1214,1382,1395,1416,1636,1651,1694,1863,1874,1960,1981,2095,2242,2261,2319,2529,2548,
27,224,245,301,312,451,559,568,725,780,793,995,1014,1095,1194,1213,1383,1417,1436,1639,1650,1673,1860,1875,1961,2094,2107,2241,2260,2328,2530,2549,
13,24,226,247,315,449,470,557,707,726,782,795,1013,1093,1106,1192,1380,1393,1419,1438,1649,1675,1692,1873,1962,1983,2092,2105,2263,2317,2330,2551,
14,25,227,303,314,448,469,570,704,727,794,993,1012,1092,1105,1215,1381,1394,1439,1637,1648,1674,1695,1862,1963,1980,2104,2243,2262,2318,2331,2528,
12,225,246,300,450,471,556,569,706,783,792,994,1094,1107,1193,1212,1392,1418,1437,1638,1672,1693,1861,1872,1982,2093,2106,2240,2316,2329,2531,2550,
11,229,240,296,317,467,552,575,709,777,796,998,1011,1111,1197,1210,1399,1420,1433,1634,1655,1689,1859,1876,1977,2091,2110,2244,2257,2312,2533,2546

};
 */




    unsigned int *h_sel;
    h_sel = (unsigned int *)malloc(sizeof(unsigned int) * 32*BLOCK_SIZE*MULTIPLIER);

    cudaMalloc((void**)&d_a0, sizeof(unsigned int) * S_SIZE);
    cudaMalloc((void**)&d_sel, sizeof(unsigned int) * 32* BLOCK_SIZE*MULTIPLIER);
    cudaCheckError();



    for (int i = 0; i < S_SIZE; i++) {
        h_arr[i] = i;
    }

    for (int j = 0; j < 32; j++){
        for (int i = 0; i < BLOCK_SIZE*MULTIPLIER; i++) {
            h_sel[i+BLOCK_SIZE*j*MULTIPLIER] = h_matrix[hrow_idx[j]*BLOCK_SIZE*MULTIPLIER+i];
        }
    }

    cudaMemcpy(d_a0, h_arr, sizeof(unsigned int) * S_SIZE, cudaMemcpyHostToDevice);
    cudaCheckError();
    cudaMemcpy(d_sel, h_sel, sizeof(unsigned int) *32* BLOCK_SIZE*MULTIPLIER, cudaMemcpyHostToDevice);
    cudaCheckError();

    int carveout = percentage; // prefer shared memory capaciwarp 100% of maximum
    cudaFuncSetAttribute (kernel, cudaFuncAttributePreferredSharedMemoryCarveout, carveout);
    cudaCheckError();

    dim3 blockDim(BLOCK_SIZE*BLOCK_SIZE);
    dim3 GridDim(NUM_SM,1,1);

    double t1 = dtime_usec(0);
    kernel<<<GridDim, blockDim>>>(d_a0,d_sel,tx_max, max_slice);
    cudaCheckError();
    cudaDeviceSynchronize();
    double t2 = dtime_usec(t1);
    //time.add((t2+19000));
    cudaCheckError();

/*     measureL2BytesStart();
    kernel<<<NUM_SM, blockDim>>>(d_a0,d_sel,row_idx,tx_max, SMdiv);
    cudaDeviceSynchronize();
    auto metrics = measureL2BytesStop();
    L2_read.add(metrics[0]);
    L2_write.add(metrics[1]); 

    float L2_read_bw = L2_read.value() / time.minValue() / 1.0e3;
    float L2_write_bw = L2_write.value() / time.minValue() / 1.0e3; */

    float L2_read_bw = ITERATION*BLOCK_SIZE*(tx_max)*8*sizeof(unsigned int)*14*max_slice / t2 / 1.0e3 ;

    printf("%f\n", L2_read_bw);


    //free(hrow_idx);
    free(h_arr);
    free(h_sel);
    //free(hSM_ids);
    cudaFree(d_a0); 
    cudaFree(d_sel);
    //cudaFree(dSM_ids);
    //cudaFree(drow_idx);

    return 0;
}


